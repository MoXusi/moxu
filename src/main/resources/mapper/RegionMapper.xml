<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.awx.moxu.mapper.RegionMapper">

    <resultMap id="BaseResultMap" type="com.awx.moxu.entity.Region">
            <id property="code" column="code" jdbcType="VARCHAR"/>
            <result property="parentCode" column="parent_code" jdbcType="VARCHAR"/>
            <result property="ancestors" column="ancestors" jdbcType="VARCHAR"/>
            <result property="name" column="name" jdbcType="VARCHAR"/>
            <result property="provinceCode" column="province_code" jdbcType="VARCHAR"/>
            <result property="provinceName" column="province_name" jdbcType="VARCHAR"/>
            <result property="cityCode" column="city_code" jdbcType="VARCHAR"/>
            <result property="cityName" column="city_name" jdbcType="VARCHAR"/>
            <result property="districtCode" column="district_code" jdbcType="VARCHAR"/>
            <result property="districtName" column="district_name" jdbcType="VARCHAR"/>
            <result property="townCode" column="town_code" jdbcType="VARCHAR"/>
            <result property="townName" column="town_name" jdbcType="VARCHAR"/>
            <result property="villageCode" column="village_code" jdbcType="VARCHAR"/>
            <result property="villageName" column="village_name" jdbcType="VARCHAR"/>
            <result property="level" column="level" jdbcType="INTEGER"/>
            <result property="sort" column="sort" jdbcType="INTEGER"/>
            <result property="remark" column="remark" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="regionVOResultMap" type="com.awx.moxu.vo.RegionVO">
        <id column="code" property="code"/>
        <result column="parent_code" property="parentCode"/>
        <result column="ancestors" property="ancestors"/>
        <result column="name" property="name"/>
        <result column="province_code" property="provinceCode"/>
        <result column="province_name" property="provinceName"/>
        <result column="city_code" property="cityCode"/>
        <result column="city_name" property="cityName"/>
        <result column="district_code" property="districtCode"/>
        <result column="district_name" property="districtName"/>
        <result column="town_code" property="townCode"/>
        <result column="town_name" property="townName"/>
        <result column="village_code" property="villageCode"/>
        <result column="village_name" property="villageName"/>
        <result column="level" property="level"/>
        <result column="sort" property="sort"/>
        <result column="remark" property="remark"/>
        <result column="id" property="id"/>
        <result column="parent_id" property="parentId"/>
        <result column="has_children" property="hasChildren"/>
    </resultMap>
    <resultMap id="treeNodeResultMap" type="com.awx.moxu.utils.ForestNode.TreeNode">
        <id column="id" property="id"/>
        <result column="parent_id" property="parentId"/>
        <result column="title" property="title"/>
        <result column="value" property="value"/>
        <result column="key" property="key"/>
    </resultMap>
    <sql id="Base_Column_List">
        code,parent_code,ancestors,
        name,province_code,province_name,
        city_code,city_name,district_code,
        district_name,town_code,town_name,
        village_code,village_name,level,
        sort,remark
    </sql>
    <select id="lazyList" resultMap="regionVOResultMap">
        SELECT
        rg.*,
        ( SELECT CASE WHEN count( 1 ) > 0 THEN 1 ELSE 0 END FROM region WHERE parent_code = rg.code ) AS "has_children"
        FROM
        region rg
        <where>
            <if test="param1!=null">
                and rg.parent_code = #{param1}
            </if>
            <if test="param2.code!=null and param2.code!=''">
                and rg.code like concat(concat('%', #{param2.code}),'%')
            </if>
            <if test="param2.name!=null and param2.name!=''">
                and rg.name like concat(concat('%', #{param2.name}),'%')
            </if>
        </where>
    </select>

    <select id="lazyTree" resultMap="treeNodeResultMap">
        SELECT
        rg.code AS "id",
        rg.parent_code AS "parent_id",
        rg.name AS "title",
        rg.code AS "value",
        rg.code AS "key",
        ( SELECT CASE WHEN count( 1 ) > 0 THEN 1 ELSE 0 END FROM region WHERE parent_code = rg.code ) AS "has_children"
        FROM
        region rg
        <where>
            <if test="param1!=null">
                and rg.parent_code = #{param1}
            </if>
            <if test="param2.code!=null and param2.code!=''">
                and rg.code like concat(concat('%', #{param2.code}),'%')
            </if>
            <if test="param2.name!=null and param2.name!=''">
                and rg.name like concat(concat('%', #{param2.name}),'%')
            </if>
        </where>
    </select>
</mapper>
